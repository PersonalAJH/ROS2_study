ROS2 에서는 복수 개의 노드를 실행 시킬 때 데이터 통신을 위한 작업으로 인한 전체적인 성능 저하와 메모리 사용량이 늘어난 다는 단점이 있다. 이를 해결하기 위해
ROS1 에서는 Nodelets 패키지를 제공한다. Node lets 패키지는 단일 프로세스 에서 동작되는 복수 개의 노드들을 위한 zero-copy
를 제공하여 퍼블리셔와 섭스크라이버 간의 데이터 ㅗㅇ신에 잇어 고정된 메모리 공간을 사용하도록 한다.

ROS2 에서는 복수 개의 노드 사용시 시스템의 성능 저하를 막기 위해 IPC(Intra-Process-Communication) 을 사용한다.

Pulisher Node가 1개의 프로세서가 실행되고 Subscriber도 1개의 프로세서가 실행되면 
Pub Node 에서 Sub node 까지 이동하기 위해 메모리 복사가 3번이 필요한데(더 많은 Data를 옮기게 되면 더 많아지게 됨)
ROS2 에서는 "IPC"를 이용하여 Pub node 와 Sub node 가 1개의 프로세서 안에서 작동하게 하므로 그런 매모리 복사가 필요하지 않게된다.
-> Threading 과 Process의 차이라고 생각하면 될듯

IPC는 rclcpp 에서만 지원한다

이미지의 경우 데이터가 크기 떄문에 IPC를 제공하지않는다면 그만큼 메모리 손실이 많아지게 되는건데 IPC 기능을 이용하여 
이미지 파이프라인을 구성하면 해당 이미지를 처리하느기 위한 노드가 복수 개여도 그 메모리가 이미지 크기로 고정되어 메모리의 효율적인 사용이 가능

https:://github.com/ros2/demos/blob/foxy/intra_process_demo/include/image_pipeline/camera_node.hpp
https:://github.com/ros2/demos/blob/foxy/intra_process_demo/include/image_pipeline/watermark_node.hpp
https:://github.com/ros2/demos/blob/foxy/intra_process_demo/include/image_pipeline/image_view_node.hpp