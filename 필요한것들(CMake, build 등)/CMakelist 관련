10.21 에러
라이브러리를 연결하는 방법들이 크게 2가지 정도 있는데

1번
target_link_libraries(my_pkg 
    관련 데이터들
)

2번
add_library(mylib SHARED ${CMAKE_SOURCE_DIR}/../External/lib/mylib.cpp)
set_target_properties(mylib PROPERTIES LINKER_LANGUAGE CXX)

인데 .so 파일(SHARED lib)(아마도 .a(STATIC)도 마찬가지)를 add_library 에서 lib를 다시 만들어서 하는 방법은
빌드에서 연결이 안됨 이미 libaray가 된 파일들은 1번의 방법(target_link_libraries)를 하는게 맞는 것 같다. 

물론 include_directories들은 잘 신경써야함








작업하면서 많이 에러도 나면서 확인한게 많은데..

1. 외부 라이브러리 사용(ex openCV, Eigen)
패키지 매니저를 사용한 설치 ex : sudo apt-get install libeigen3-dev
이런식으로 설치한 라이브러리들은 
find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})

그것이 아니라 jsoncpp 처럼 직접 들고와서 빌드를 하고 라이브러리 파일을 만들어서 include 하는 경우는(.a, .so)
include_directories(path/to/eigen)  -> 이건 약간 특이 케이스일수도 내가 뭔가 변경 시켰거나 해서 직접 헤더를 인클루드하고 하는 경우 발생
target_link_libraries(path/to/eigen/libaray.a)

2. 순서에 관한 대략 정리
project(<project_name>): 프로젝트의 이름을 설정하며 이 명령어는 cmake_minimum_required 바로 뒤에 위치하는 것이 일반적
target_link_libraries(): 실행 파일에 라이브러리를 링크하며 이는 add_executable() 명령어 뒤에 위치해야 함
target_link_libraries()는 add_executable() 또는 add_library() 명령어 뒤에 호출

3. add_executable(A a.cpp)
add_library(B B.cpp)

만약 B에 C라는 라이브러리가 필요하면(dependencies)
B의 타겟에 디팬던시 지정을 해줘야 한다...(나는 마지막 실행파일에서 같이 묶어야하는줄 알았다..) 