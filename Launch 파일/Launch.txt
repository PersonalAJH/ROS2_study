ROS2 의 런치 파일은 python을 사용하며 런치파일은 하나 이상의 노드를 실행하고 필요한 매개 변수를 설정하여 다양한 구성요소들 간의 상호 작용을 적용하는데 사용함 

예제 파일(example_launch.py)을 같이 참고하면 더 자세히 확인가능


launch 파일에 사용할 수 있는 파라미터는 여러가지가 있는데 1. package 와 2. executable 은 필수 요건 

1. package
- 패키지의 이름 

2. executable
- 실행파일

3. name
- name 같은경우는 필수는 아니지만 노드의 이름이 겹칠때 그걸 분류해주는 (? 정확하게 하는? ) 작업이 필요하기에 같이 써주는 편이 좋다.

4. output
- output 은 그 print 같은걸 스크린에 띄울지 말지를 정할 수 있다. 혹시 내가 어떤 노드에서 나오는 print 는 모두 안봐도 된다 할때는 이 output 을 없애도 된다. 

5. emulate_tty
- emulate(모방하다) tty 이므로  tty 를 따라하는건데 좋은 프린트? 색깔이 나오고 더 명확하게 나오고 하는 옵션이다 output 과 연계되서 나오는 옵션



여기까지 많이 사용했던것이고 아랫부분은 참고


6. namespace
- namespace 파라미터는 노드가 실행될 ROS 네임스페이스를 지정합니다. 이를 통해 같은 타입의 노드 여러 개를 격리시키거나 그룹화할 수 있습니다.

7. remappings
- remappings는 토픽, 서비스, 파라미터 이름 등을 다른 이름으로 매핑할 수 있도록 합니다. 이를 통해 노드 간의 연결을 유연하게 변경할 수 있습니다.

8. arguments
- arguments는 노드 실행 파일에 전달될 커맨드라인 인자를 지정합니다. 이를 통해 노드의 동작을 커스터마이징할 수 있습니다.

9. env
- env는 노드가 실행될 때 사용될 환경 변수를 설정할 수 있습니다. 이는 특정 환경 변수를 기반으로 노드의 동작을 변경해야 할 때 유용합니다.

10. condition
- condition은 노드가 실행되거나 실행되지 않을 조건을 지정할 수 있습니다. 예를 들어, 특정 조건이 True일 때만 노드를 실행하도록 설정할 수 있습니다.
- ex) condition=IfCondition(EnvironmentVariable('LAUNCH_EXAMPLE', default_value='false')) || export LAUNCH_EXAMPLE=true,  실행하기 이전에 환경변수 와 같은 값을 변경하여 할 수있다 .

11. prefix
- prefix는 노드 실행 파일을 실행하기 전에 적용될 명령어 접두사를 설정할 수 있습니다. 이는 디버깅 도구나 다른 실행 환경을 노드 실행 전에 설정할 때 사용될 수 있습니다.
- prefix='gdb -ex run --args' ->  C++ 노드를 gdb 디버거와 함께 실행하려면 이런 옵션을 사용 할 수 있다. 


12. respawn
- respawn은 노드가 비정상적으로 종료될 경우 자동으로 재시작할지 여부를 설정합니다. 이를 통해 노드의 연속적인 운영을 보장할 수 있습니다.
- 이건 예제에 있음 이건 꽤 쓸만할것같음 어떤 debug 상에서 문제가 발생할 때 while(0) 로 돌려놓으면 노드가 죽기 떄문에 

13. respawn_delay
- respawn_delay는 노드가 재시작될 때 사이의 지연 시간(초 단위)을 설정합니다. respawn이 True로 설정된 경우에만 유효합니다.


